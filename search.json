[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ESQlabs’ R Guidelines",
    "section": "",
    "text": "Welcome\nThe ESQlabs’ R Guidelines book establishes general and internal good practices to ensure that scripts are written in a unified manner that promotes readability, reproducibility and comprehension for all team members at ESQlabs.\nThis book introduces R good practices that must be followed by all ESQlabs collaborators when writing R code. This includes respecting ESQlabs’ coding style specifications based on the most important standard coding style rules. Additionally, it provides a list of useful R resources organized by topics and a some help for troubleshooting some common issues and mistakes.\n\n\n\n\n\n\nThis book is meant for all R users at ESQlabs and apply to all R code written for projects. For development guidelines, please refer to the OSPS-R coding standards",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "good_practices.html",
    "href": "good_practices.html",
    "title": "1  ESQlabs’ R Good Practices",
    "section": "",
    "text": "1.1 Within projects",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>ESQlabs' R Good Practices</span>"
    ]
  },
  {
    "objectID": "good_practices.html#within-projects",
    "href": "good_practices.html#within-projects",
    "title": "1  ESQlabs’ R Good Practices",
    "section": "",
    "text": "1.1.1 R projects\n\nUse R projects. R projects should be created when your project was initialized.\nDo not use setwd, with R projects the working directory should already be set to the right location.\nOnly use relative paths that are contained within your project structure.\n\n\n\n1.1.2 Renv\n\nUse {renv} to ensure every collaborator use the same version of the packages. Ideally your project should have been set up with {renv}.\n\n\n\n1.1.3 Style\n\nRespect coding style.\nHelp yourself and others by using {styler} package (for indentations and line breaks compliance), and {lintr} package for checking style (line length, variable casing, …).\n\nBoth packages provides easily accessible RStudio Addins (e.g. Style current file, Lint current file).\nStyling current file will directly reformat your file, while linting your file will tell you where and why your code is not compliant to the defined style.\nBoth packages and a default .lintr should be ready to use within your project (soon).\n\n\n\n\n1.1.4 Code Organisation and Structure\n\nRespect code header (include author, date, …), should be at the very beginning of the script:\n\n################################\n# Authors:     Name \n# Property:     ESQlabs GmbH\n# Initial Date: DD.MM.YYYY\n# Last updated: DD.MM.YYYY\n################################\n\nUse sections (commented lines of - or =) to break up your file into easily readable chunks.\n\n# Load Libraries --------------------\n\nLoad needed packages at the beginning of the file, in the first section just after the header.\nSource needed files (for example containing “homemade” functions) just after loading packages in a specific section.\nDefine constant parameters in a specific section just after loading packages or sourcing files.\n\n\n\n1.1.5 Comments\n\nComment your code. Explain the “why” not the “what” or “how”.\nOnce your code is finalized remove any commented code from your files.\n\n\n\n1.1.6 Functions\n\nGeneric “homemade” functions that might be needed in various R scripts should be written in a separate file sourced when needed.\nAvoid having too many nested levels (for loops, …). Try to create functions instead.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>ESQlabs' R Good Practices</span>"
    ]
  },
  {
    "objectID": "style.html",
    "href": "style.html",
    "title": "2  ESQlabs’ R Style Guide",
    "section": "",
    "text": "2.1 Syntax",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>ESQlabs' R Style Guide</span>"
    ]
  },
  {
    "objectID": "style.html#syntax",
    "href": "style.html#syntax",
    "title": "2  ESQlabs’ R Style Guide",
    "section": "",
    "text": "2.1.1 Naming Conventions\nFor simplicity, users should use snake_case as recommended by the tidyverse style (this is not the case for developers that should follow the OSPS-R coding standards).\nHowever the naming style depends on the type of object: \n\nVariable and function names should use only letters and numbers. Use snake_case to separate words within a name:\n\n# Good\nfit_model &lt;- function() {\n  # code\n}\nresults_df &lt;- data.frame()\n\nTrue constant variables should use ALL_CAPS casing:\n\n# Good\nCONSTANT_VAR &lt;- 1\n\nUse short meaningful and understandable names. The code should read as a story and only some well-known abbreviations should be used:\n\n# Good\npk_data &lt;- read_excel(\"pkDataFile.xls\")\n\n# Bad\npharmacokinetics_data &lt;- read_excel(\"pkDataFile.xls\") # Too long\n\n\n\n\n2.1.2 Spacing\nBecause it is not explicitly said in the tidyverse guideline and for improved code readability, use the following indentation settings:\n\nUse spaces instead of tabs\nUse indentation width of 2\n\nYou can check that these settings are correctly set in Tools &gt; Global Options &gt; Code &gt; Editing:",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>ESQlabs' R Style Guide</span>"
    ]
  },
  {
    "objectID": "style.html#functions",
    "href": "style.html#functions",
    "title": "2  ESQlabs’ R Style Guide",
    "section": "2.2 Functions",
    "text": "2.2 Functions\n\n2.2.1 return()\nPrefer using return() for explicitly returning result, although you can rely on R to implicitly return the result of the last evaluated expression in a function.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>ESQlabs' R Style Guide</span>"
    ]
  },
  {
    "objectID": "style.html#line-length",
    "href": "style.html#line-length",
    "title": "2  ESQlabs’ R Style Guide",
    "section": "2.3 Line length",
    "text": "2.3 Line length\nAvoid having long lines. Restrict yourself to 120 characters (instead of the usual limit of 80 characters).",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>ESQlabs' R Style Guide</span>"
    ]
  },
  {
    "objectID": "tidyverse_style.html",
    "href": "tidyverse_style.html",
    "title": "3  Tidyverse Style Guide Highlights",
    "section": "",
    "text": "3.1 Files",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Tidyverse Style Guide Highlights</span>"
    ]
  },
  {
    "objectID": "tidyverse_style.html#files",
    "href": "tidyverse_style.html#files",
    "title": "3  Tidyverse Style Guide Highlights",
    "section": "",
    "text": "3.1.1 Names\n\nFile names should be meaningful and end in .R.\nAvoid using special characters and spaces in file names. Stick with numbers, letters, -, and _.\nPrefer file names that are all lower case.\nIf files should be run in a particular order, prefix them with numbers.\n\n\n\nExamples\n# Good\n01_preprocessing.R\n02_fit_models.R\nutility_functions.R\n\n\n\n\n3.1.2 Structure\n\nUse sections (commented lines of - and =) to break up your file into easily readable chunks.\nLoad all needed packages at the very beginning of the file (and don’t scatter them in your code).\n\n\n\nExamples\n# Load packages -----------------------\nlibrary(esqlabsR)\n\n# Load Data ---------------------------\n\n# Plot data ---------------------------\n## Plot time profile ------------------\n\n## Plot observed vs simulated ---------",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Tidyverse Style Guide Highlights</span>"
    ]
  },
  {
    "objectID": "tidyverse_style.html#syntax",
    "href": "tidyverse_style.html#syntax",
    "title": "3  Tidyverse Style Guide Highlights",
    "section": "3.2 Syntax",
    "text": "3.2 Syntax\n\n3.2.1 Object Names\n\nVariable names should be nouns and function names should be verbs.\nNames should be concise and meaningful (this is not easy!).\nUse underscores _ to separate words within a name (so called snake case).\nAvoid re-using names of common functions and variables.\n\n\n\nExamples\n# Good \n# Variable names (nouns)\nday_one\nday_1\n\n# Function names (verbs)\nadd_rows()\npermute()\n\n# Bad\nfirst_day_of_the_month # too long\nd1 # not explicit\nrow_adder() # not a verb\nT &lt;- FALSE # reusing of common name\nmean &lt;- 10 # reusing of common function\n\n\n\n\n3.2.2 Assignment\n\nUse &lt;-, not =, for assignment.\n\n\n\n3.2.3 Spacing\n\nAlways put a space after a comma, never before.\nMost infix operators (+, -, /, *, &lt;-, =, ==, &, &&, |, ||, &gt;, &lt;, &gt;=, &lt;=, %in%, etc.) should always be surrounded by spaces.\nSome infix operators with high precedence (^, :, $, [], [[]], ::, :::, @, etc.) should never be surrounded by spaces.\nAdding extra spaces is allowed only if it improves alignment of &lt;- or =.\n\n\n\nExamples\n# Good\nmy_data[, 1]\nx &lt;- 1:10\ny &lt;- c(1, 5, 8)\n\nheight &lt;- (feet * 12) + inches\nbmi &lt;- weight^2 / height\n\n\n\n3.2.3.1 Functions\n\nDo not put spaces inside or outside parentheses for regular function calls.\nPlace spaces around = when used in function calls.\nWhen you call a function, you can omit the names of data arguments, because they are used so commonly. If you override the default value of an argument, use the full name.\nPlace a space after () used for function arguments definition.\n\n\n\nExamples\n# Good\nmean(x, na.rm = TRUE)\n\nmy_function &lt;- function(x, y) {\n  # As usual code is indented by two spaces\n}\n\n\n\n\n3.2.3.2 Statements\n\nPlace a space before and after () when used with if, for, or while.\nIf used, else should be on the same line as }.\n& and | should never be used inside of an if clause because as they can return vectors. Always use && and || instead.\nIt’s ok to drop the curly braces for very simple statements that fit on one line, as long as they don’t have side-effects.\n\n\n\nExamples\n# Good\nif (y &lt; 0 && debug) {\n  message(\"y is negative\")\n} else {\n  message(\"y is positive or zero\")\n}\n\nmessage &lt;- if (x &gt; 10) \"big\" else \"small\"\n\n\n\n\n3.2.3.3 Code blocks\n\nAn opening curly brace { should always be followed by a new line. Related code (e.g., an if clause, a function declaration, …) must be on the same line as the opening brace.\nA closing curly brace } should always go on its own line, unless it’s followed by else.\nAlways indent the code inside curly braces by two spaces.\n\n\n\nExamples\n# Good\nif (y == 0) {\n  if (x &gt; 0) {\n    log(x)\n  } else {\n    message(\"x is negative or zero\")\n  }\n} else {\n  y^x\n}\n\n\n\n\n3.2.3.4 Pipes\n\nPipes %&gt;% should always have a space before it, and should usually be followed by a new line.\nAfter the first step, each line should be indented by two spaces.\n\n\n\nExamples\niris %&gt;%\n  group_by(Species) %&gt;%\n  summarize_if(is.numeric, mean) %&gt;%\n  ungroup() %&gt;%\n  gather(measure, value, -Species) %&gt;%\n  arrange(value)\n\n\n\n\n3.2.3.5 ggplot2\n\n+ should always have a space before it, and should be followed by a new line (such that each layer is on its own line).\nAfter the first step, each line should be indented by two spaces.\n\n\n\nExamples\nggplot(iris, aes(x = Sepal.Width, y = Sepal.Length)) +\n  geom_point() +\n  labs(x = \"Sepal Width (cm)\", y = \"Sepal Length (cm)\")",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Tidyverse Style Guide Highlights</span>"
    ]
  },
  {
    "objectID": "tidyverse_style.html#long-lines",
    "href": "tidyverse_style.html#long-lines",
    "title": "3  Tidyverse Style Guide Highlights",
    "section": "3.3 Long Lines",
    "text": "3.3 Long Lines\n\n3.3.1 Function call\n\nIf a function call is too long to fit on a single line, use one line each for the function name, each argument, and the closing ). This makes the code easier to read and to change later.\n\n\n\nExamples\n# Good\ndo_something_very_complicated(\n  something = \"that\",\n  requires = many,\n  arguments = \"some of which may be long\"\n)\n\n\n\n\n3.3.2 Function definition\n\nIf a function definition is too long to fit on a single line use either:\n\nfunction indent (place each argument on its own line and indent to match the opening ( of the function). This is the preferred method.\ndouble-indent (place each argument on its own double indented line)\n\nIn both cases the trailing ) and leading { should go on the same line as the last argument.\n\n\n\nExamples\n# Function indent (preferred method)\nlong_function_name &lt;- function(a = \"a long argument\",\n                               b = \"another argument\",\n                               c = \"another long argument\") {\n  # As usual code is indented by two spaces\n}\n\n# Double indent\nlong_function_name &lt;- function(\n    a = \"a long argument\",\n    b = \"another argument\",\n    c = \"another long argument\") {\n  # As usual code is indented by two spaces\n}",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Tidyverse Style Guide Highlights</span>"
    ]
  },
  {
    "objectID": "tidyverse_style.html#comments",
    "href": "tidyverse_style.html#comments",
    "title": "3  Tidyverse Style Guide Highlights",
    "section": "3.4 Comments",
    "text": "3.4 Comments\n\nExplain the “why” not the “what” or “how”.\nEach line of a comment should begin with the comment symbol # and a single space.\nComments should be in sentence case, and only end with a full stop if they contain at least two sentences.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Tidyverse Style Guide Highlights</span>"
    ]
  },
  {
    "objectID": "tidyverse_style.html#others",
    "href": "tidyverse_style.html#others",
    "title": "3  Tidyverse Style Guide Highlights",
    "section": "3.5 Others",
    "text": "3.5 Others\n\nPrefer TRUE and FALSE over T and F.\nUse \", not ', for quoting text.\nDon’t put ; at the end of a line, and don’t use ; to put multiple commands on one line.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Tidyverse Style Guide Highlights</span>"
    ]
  },
  {
    "objectID": "troubleshooting.html",
    "href": "troubleshooting.html",
    "title": "4  Troubleshooting",
    "section": "",
    "text": "4.1 Package Installation\nPackage installation can sometime be tricky and can go wrong for several reasons (locked files, outdated dependencies, old R version …). To minimize the chance of errors, follow this checklist:",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Troubleshooting</span>"
    ]
  },
  {
    "objectID": "troubleshooting.html#package-installation",
    "href": "troubleshooting.html#package-installation",
    "title": "4  Troubleshooting",
    "section": "",
    "text": "Make sure no RStudio Project is loaded (except when using `{renv}`).\nMake sure no package are loaded in the R session. Use Ctrl + Alt + F10 to restart the session to a fresh state.\nMake sure you have a GITHUB_PAT token configured (by running Sys.getenv(\"GITHUB_PAT\") in a R session, it should return a character starting with ghp_). If not, follow these instructions.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Troubleshooting</span>"
    ]
  },
  {
    "objectID": "resources.html",
    "href": "resources.html",
    "title": "5  Resources",
    "section": "",
    "text": "5.1 General",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Resources</span>"
    ]
  },
  {
    "objectID": "resources.html#general",
    "href": "resources.html#general",
    "title": "5  Resources",
    "section": "",
    "text": "R for Data Science (2e)",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Resources</span>"
    ]
  },
  {
    "objectID": "resources.html#visualization",
    "href": "resources.html#visualization",
    "title": "5  Resources",
    "section": "5.2 Visualization",
    "text": "5.2 Visualization\n\nR Graphics Cookbook\nggplot2: Elegant Graphics for Data Analysis (3e) - WIP\nPlots gallery, can serve as examples or ideas",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Resources</span>"
    ]
  },
  {
    "objectID": "resources.html#r-development",
    "href": "resources.html#r-development",
    "title": "5  Resources",
    "section": "5.3 R Development",
    "text": "5.3 R Development\n\nAdvanced R\nR packages",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Resources</span>"
    ]
  },
  {
    "objectID": "resources.html#shiny-apps",
    "href": "resources.html#shiny-apps",
    "title": "5  Resources",
    "section": "5.4 Shiny Apps",
    "text": "5.4 Shiny Apps\n\nShiny Tutorials\nMastering Shiny\nGallery of apps and widgets",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Resources</span>"
    ]
  },
  {
    "objectID": "resources.html#interactive-visualization",
    "href": "resources.html#interactive-visualization",
    "title": "5  Resources",
    "section": "5.5 Interactive Visualization",
    "text": "5.5 Interactive Visualization\n\nInteractive web-based data visualization with R, plotly, and shiny\nPlotly documentation",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Resources</span>"
    ]
  },
  {
    "objectID": "resources.html#style-and-coding-standards",
    "href": "resources.html#style-and-coding-standards",
    "title": "5  Resources",
    "section": "5.6 Style and Coding Standards",
    "text": "5.6 Style and Coding Standards\n\nTidyverse style guide",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Resources</span>"
    ]
  },
  {
    "objectID": "resources.html#cheatsheets",
    "href": "resources.html#cheatsheets",
    "title": "5  Resources",
    "section": "5.7 Cheatsheets",
    "text": "5.7 Cheatsheets\n\nRStudio has many cheatsheets",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Resources</span>"
    ]
  }
]